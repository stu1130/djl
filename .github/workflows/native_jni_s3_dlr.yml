name: Native JNI S3 DLR

on:
  workflow_dispatch:

jobs:
  find-dlr-version:
    steps:
      - uses: actions/checkout@v2
      - name: Get DLR_VERSION
          run: |
            DLR_VERSION="$(cat gradle.properties | awk -F '=' '/dlr_version/ {print $2}')"
            echo "${DLR_VERSION}" > version.txt
      - name: Upload version
          uses: actions/upload-artifact@v2
          with:
            name: version
            path: version.txt

  build-dlr-jni-cpu:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [macos-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Release JNI prep
        run: ./gradlew :dlr:dlr-native:compileJNI
      - name: Upload compiled jni library
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: jnilib-${{ runner.os }}
          path: pytorch/pytorch-native/jnilib

  publish:
    runs-on: ubuntu-18.04
    needs: [ build-pytorch-jni-cpu ]
    steps:
      - name: Download DLR version
        uses: actions/download-artifact@v2
        with:
          name: version
      - uses: actions/checkout@v2
      - name: Download compiledJNI Mac
        uses: actions/download-artifact@v1
        with:
          name: jnilib-macOS
          path: jnilib
      - name: Copy files to S3 with the AWS CLI
        run: |
          DLR_VERSION="$(cat version.txt)"
          aws s3 sync jnilib s3://djl-ai/publish/dlr-${DLR_VERSION}/jnilib
      # TODO add test here
